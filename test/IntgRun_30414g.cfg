# Test the production of the complete chain:
# from digi to RecSegment 4D, through RecHit1D and RecSegment2D
# starting from real cosmic data from commissioning
# Up to now only the Linear Drift alogo is available for the
# commisioning data.
##

process testDTAnalyzer  = {


  include "CondCore/DBCommon/data/CondDBSetup.cfi"

############################################################################################	
#			F I L E   R E A D E R 
############################################################################################	

# Event Formatter
  untracked PSet maxEvents = {
    untracked int32 input = -1
#    untracked int32 input = 100	
  }


# ======================================================
# 1) choose here your Input data 
# ======================================================

# global runs:
source = NewEventStreamFileReader{
#  source = PoolSource {
#    untracked string fileMatchMode = "permissive"
#      untracked uint32 firstRun = 0
#      untracked uint32 firstEvent = 0
#      untracked uint32 skipEvents = 0
# untracked vstring fileNames = {'file:/tmp/ugasp/DTHCALr28835_1.root'}
 untracked vstring fileNames = {

'rfio:/castor/cern.ch/cms/store/data/GlobalNov07/A/000/030/414/GlobalNov07.00030414.0001.A.storageManager.0.0000.dat',
'rfio:/castor/cern.ch/cms/store/data/GlobalNov07/A/000/030/414/GlobalNov07.00030414.0001.A.storageManager.0.0001.dat',
'rfio:/castor/cern.ch/cms/store/data/GlobalNov07/A/000/030/414/GlobalNov07.00030414.0001.A.storageManager.0.0002.dat',
'rfio:/castor/cern.ch/cms/store/data/GlobalNov07/A/000/030/414/GlobalNov07.00030414.0002.A.storageManager.0.0000.dat',
'rfio:/castor/cern.ch/cms/store/data/GlobalNov07/A/000/030/414/GlobalNov07.00030414.0002.A.storageManager.0.0001.dat',
'rfio:/castor/cern.ch/cms/store/data/GlobalNov07/A/000/030/414/GlobalNov07.00030414.0002.A.storageManager.0.0002.dat'


   }
  }



# ===========================================================
# 2) Configure here the Data Unpacker
# =========================================================== 


    module dtunpacker = DTUnpackingModule {
	string dataType = "DDU"
	PSet readOutParameters = {
	    untracked bool localDAQ = false
	    untracked bool performDataIntegrityMonitor = false
	    untracked bool debug = false
	    PSet rosParameters = {
		untracked bool localDAQ = false
		untracked bool readingDDU = true
		untracked bool writeSC = true
		untracked bool readDDUIDfromDDU = true
		untracked bool performDataIntegrityMonitor = false
		untracked bool debug = false
	    }
	}
	PSet rosParameters = {
	    untracked bool localDAQ = false
	    untracked bool readingDDU = true
	}
    }

# =================================    
# 3) Mapping & t0 calibs    
# =================================

    es_source dtConditions = PoolDBESSource {
	string timetype = "runnumber"
	string connect = "frontier://FrontierOn/CMS_COND_ON_170_DT"
	PSet DBParameters = {
	    untracked int32 messageLevel = 0
	    untracked string authenticationPath = "/afs/cern.ch/cms/DB/conddb"
	}
	VPSet toGet = {
	    { string record = "DTReadOutMappingRcd"
		string tag = "GRENmap_774" },
	    { string record = "DTT0Rcd"
		string tag = "GRENt0" },
	    { string record = "DTTtrigRcd"
		string tag = "GRENttrigTest" }
	}
    }


  include "CondCore/DBCommon/data/CondDBSetup.cfi"

     	module hcalunpacker = HcalRawToDigi {
                int32 firstSample = 0
                int32 lastSample = 9
                untracked int32 HcalFirstFED = 700
                #add
                untracked vint32 FEDs = {700,701,702,703,704,705,
                                         706,707,708,709,710,711,
                                         712,713,714,715,716,717,
                                         718,719,720,721,722,723,
                                         724,725,726,727,728,729,
                                         730,731 }
		bool FilterDataQuality = true
		untracked bool UnpackCalib = true
		InputTag InputLabel = source	
	}




# ============================================
#  6) cfi's for reconstruction
# ============================================	
  

       
   include "Geometry/CMSCommonData/data/cmsSimIdealGeometryXML.cfi"
 #   include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
    include "Geometry/DTGeometry/data/dtGeometry.cfi"
    include "Geometry/CSCGeometry/data/cscGeometry.cfi"
    include "Geometry/MuonNumbering/data/muonNumberingInitialization.cfi"


    include "RecoLocalMuon/DTRecHit/data/dt1DRecHits_LinearDrift_CosmicData.cfi"
#   modified hit resolution
#    include "RecoLocalMuon/DTSegment/test/dt1DRecHits_LinearDrift_CosmicData.cfi"
#    replace double hitResolution = 0.06
    include "RecoLocalMuon/DTSegment/data/dt2DSegments_CombPatternReco2D_LinearDrift_CosmicData.cfi"
    include "RecoLocalMuon/DTSegment/data/dt4DSegments_CombPatternReco4D_LinearDrift_CosmicData.cfi"

    
       ## Geometry
    include "Geometry/CommonDetUnit/data/globalTrackingGeometry.cfi"
#    include "MagneticField/Engine/data/uniformMagneticField.cfi"
##    include "RecoLocalMuon/DTSegment/test/uniformMagneticField.cfi"
#  temporary....(and wrong!, just for 'formal' tests...)
#    include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
    include "MagneticField/Engine/data/uniformMagneticField.cfi"
    replace UniformMagneticFieldESProducer.ZFieldInTesla=0.03
# es_prefer = UniformMagneticFieldESProducer{}

    include "RecoMuon/DetLayers/data/muonDetLayerGeometry.cfi"
    include "RecoMuon/MuonSeedGenerator/data/CosmicMuonSeedProducer.cfi"
    replace CosmicMuonSeed.EnableCSCMeasurement = false
    include "RecoMuon/CosmicMuonProducer/data/cosmicMuons.cfi"
    replace	cosmicMuons.TrajectoryBuilderParameters.EnableDTMeasurement = true
	replace cosmicMuons.TrajectoryBuilderParameters.EnableCSCMeasurement = false
	replace cosmicMuons.TrajectoryBuilderParameters.EnableRPCMeasurement = false
	#replace cosmicMuons.TrajectoryBuilderParameters.BackwardMuonTrajectoryUpdatorParameters.Granularity= 0

   ## propagation
   include "TrackPropagation/SteppingHelixPropagator/data/SteppingHelixPropagator.cfi"

# avoid printout at each event...
  service = MessageLogger {
    untracked vstring categories = { "CosmicMuonProducer" , "CosmicMuonTrajectoryBuilder" }
    untracked vstring destinations = { "cout" }
    # untracked vstring categories = { "CosmicMuonProducer" }
    untracked vstring debugModules = { "*" }
    untracked vstring debugModules = { "CosmicMuonProducer" , "CosmicMuonTrajectoryBuilder" }
    untracked PSet cout = {
      untracked string threshold = "WARNING"
        untracked bool noLineBreaks = true
        untracked PSet WARNING = {untracked int32 limit = 0 }
    }
  }

#  to have reco object output file:
        module out = PoolOutputModule {
                                       untracked string fileName ="MuonReco.root"
                                      }


# ===================================================
#  7) configuration of your analyzer
# ===================================================

include "Calibration/HcalAlCaRecoProducers/data/ALCARECOHcalCalHO.cff"

replace hoCalibProducer.muons = cosmicMuons # standAloneMuons
replace hoCalibProducer.PedestalFile = "pedestal30478_2.txt"
replace hoCalibProducer.RootFileName = "test_30414g.root"
replace hoCalibProducer.digiInput = true
replace hoCalibProducer.hbinfo = true # false
replace hoCalibProducer.hotime = true

replace hoCalibProducer.firstTS = 3
replace hoCalibProducer.lastTS = 6
replace hoCalibProducer.m_scale = 4.0
replace hoCalibProducer.sigma = 0.9

include "Calibration/HcalAlCaRecoProducers/data/ALCARECOHcalCalHO_Output.cff"

#	module hocal = PoolOutputModule {
#	  untracked string fileName =	"hok_cosmicmu_152.root"
#	using OutALCARECOHcalCalHO
#        }

 module hoCalibc = HOCalibAnalyzer{ 
 untracked string RootFileName = "hocalib_global_30414g.root"
 untracked string txtFileName =  "hocalib_global_30414.txt"
 untracked string psFileName =   "hocalib_global_30414.ps"
 untracked bool   hbinfo =true # false
 untracked bool   hbtime =false
 untracked bool   hotime =false
 untracked bool   correl =false
 untracked bool   checkmap =false
 untracked bool   combined =true # false
 untracked bool   get_constants =false # true # false
 untracked bool   coulomb_or_gev = true # coulomb	
 }

    es_module = HcalDbProducer { 
	untracked vstring dump = { "" }
    }

    es_source es_hardcode =     HcalHardcodeCalibrations { untracked vstring toGet = {"GainWidths", "ChannelQuality"}}
   es_source hcalConditions = PoolDBESSource {
    string timetype = "runnumber"
    string connect = "frontier://Frontier/CMS_COND_ON_170_HCAL"
    PSet DBParameters = {
      untracked int32 messageLevel = 0
      untracked string authenticationPath = "/afs/cern.ch/cms/DB/conddb"
    }
    VPSet toGet = {
      { string record = "HcalPedestalsRcd" string tag ="hcal_pedestals_fC_gren" },
      { string record = "HcalElectronicsMapRcd" string tag ="emap_temp_slb_fix_2Dec07" },
      { string record = "HcalGainsRcd" string tag = "hcal_gains_v1" },
      { string record = "HcalQIEDataRcd" string tag ="qie_normalmode_v3" },
      { string record = "HcalPedestalWidthsRcd" string tag ="hcal_widths_fC_gren" }
    }
    untracked bool siteLocalConfig = false
  }

    path p = {dt1DRecHits, dt2DSegments, dt4DSegments, CosmicMuonSeed, cosmicMuons, hcalunpacker, hoCalibProducer, hoCalibc} 


## this is to have edm-root output file with reco objects
	   endpath this_is_the_end = {out}
 
}
